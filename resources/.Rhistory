owner
runApp('Desenvolvimento/jupiter-r')
runApp('Desenvolvimento/jupiter-r')
runApp('Desenvolvimento/jupiter-r')
runApp('Desenvolvimento/jupiter-r')
runApp('Desenvolvimento/jupiter-r')
runApp('Desenvolvimento/jupiter-r')
teste <- c("K", "G")
for (i in 1:length(teste)) {
paste(teste[i])
}
teste <- c("K", "G")
paste(teste, collapse = ", ")
runApp('Desenvolvimento/jupiter-r')
runApp('Desenvolvimento/jupiter-r')
runApp('Desenvolvimento/jupiter-r')
runApp('Desenvolvimento/jupiter-r')
runApp('Desenvolvimento/jupiter-r')
runApp('Desenvolvimento/jupiter-r')
runApp('Desenvolvimento/jupiter-r')
runApp('Desenvolvimento/jupiter-r')
body <- dashboardBody(
tags$head(tags$style(HTML('
/* logo */
.skin-blue .main-header .logo {
background-color: #26A69A;
}
/* logo when hovered */
.skin-blue .main-header .logo:hover {
background-color: #00897B;
}
/* navbar (rest of the header) */
.skin-blue .main-header .navbar {
background-color: #26A69A;
}
/* main sidebar */
.skin-blue .main-sidebar {
background-color: #009688;
}
/* active selected tab in the sidebarmenu */
.skin-blue .main-sidebar .sidebar .sidebar-menu .active a{
background-color: #00897B;
}
/* other links in the sidebarmenu */
.skin-blue .main-sidebar .sidebar .sidebar-menu a{
background-color:#009688;
color: #ffffff;
}
/* other links in the sidebarmenu when hovered */
.skin-blue .main-sidebar .sidebar .sidebar-menu a:hover{
background-color: #00897B;
}
/* toggle button when hovered  */
.skin-blue .main-header .navbar .sidebar-toggle:hover{
background-color: #00897B;
}
'
)
)
),
tabItems(
#   tabItem("love",
#           fluidRow(
#             box(
#               width = 12,
#               collapsible = TRUE,
#               status = "success",
#               title = "Meu Amor,",
#               "Para incentivar o início da sua nova jornada na biblioteconomia.",br(),
#               "Para registrar nossas sessões de filme com pipoca, nossas viagens, nossas vontades...",br(),
#               "Para demonstrar (da forma mais nerd possível) que eu quero construir um futuro do seu lado.",br(),br(),
#               "Pintuxa, QUE SACO!!!!", br(),
#               "Desejo que você sinta a MAIS PLENA FELICIDADE que o universo pode proporcionar.",br(),
#               "Desejo mais trilhões de anos de vida (em várias dimensões e planetas).",br(),
#               "Desejo que esse seja o segundo de MUITOS aniversários que passamos juntos.",br(),br(),
#               "Eu te amo MUITO!!!",br(),
#               "Feliz Aniversário Pintuxa!!!!!"
#             ),
#             box(
#               width = 4,
#               collapsible = TRUE,
#               collapsed = TRUE,
#               title = "Presente 1",
#               "TAMA O LIVRO DOS DESCONTOS INFINITOS EM RESTAURANTES!"
#             ),
#             box(
#               width = 4,
#               collapsible = TRUE,
#               collapsed = TRUE,
#               title = "Presente 2",
#               "TAMA VALE JANTAR!"
#             ),
#             box(
#               width = 4,
#               collapsible = TRUE,
#               collapsed = TRUE,
#               title = "Presente 3",
#               "TAMA UM BEIJO!"
#             )
#           )
#   ),
tabItem("books",
fluidRow(
box(
title = "Add book",
width = 12,
collapsible = TRUE,
collapsed = TRUE,
status = "success",
textInput("title_book", h4("Title"), ""),
textInput("author_book", h4("Author"), ""),
textInput("genre_book", h4("Genre"), ""),
box(
width = 4,
status = "success",
checkboxGroupInput("checkGroup_has", label = h4("Book owner"),
choices = list("K" = 'K', "G" = 'G'))
),
box(
width = 4,
status = "success",
checkboxGroupInput("checkGroup_read", label = h4("Read"),
choices = list("K" = 'K', "G" = 'G'))
),
box(
width = 4,
checkboxGroupInput("checkGroup_reading", label = h4("Reading"),
choices = list("K" = 'K', "G" = 'G'))
),
actionButton("add_book", "Add")
),
tabBox(
width = 12,
tabPanel("All", DT::dataTableOutput("all_books")),
tabPanel("Library", DT::dataTableOutput("library")),
tabPanel("Waiting to be read", DT::dataTableOutput("waiting_to_be_read")),
tabPanel("Books to buy", DT::dataTableOutput("books_to_buy")),
tabPanel("Statistics", tableOutput("books_statistics"))
)
)
),
tabItem("movies",
fluidRow(
box(
width = 12,
collapsible = TRUE,
collapsed = TRUE,
status = "success",
title = "Add movie",
textInput("name_movie", h4("Name"), ""),
textInput("genre_movie", h4("Genre"), ""),
actionButton("add_movie", "Add")
),
tabBox(
width = 12,
tabPanel("All", DT::dataTableOutput("all_movies")),
tabPanel("To watch", DT::dataTableOutput("to_watch")),
tabPanel("Statistics", tableOutput("movies_statistics"))
)
)
),
tabItem("trip",
fluidRow(
tabBox(
width = 12,
tabPanel("Checks", DT::dataTableOutput("checks")),
tabPanel("Discover", DT::dataTableOutput("discover")),
tabPanel("Timeline", timevisOutput("trip_timeline")),
tabPanel("Map", leafletOutput("map", height="500")),
tabPanel("Camping items", DT::dataTableOutput("setup_acampamento"))
)
)
)
)
)
runApp('Desenvolvimento/jupiter-r')
runApp('Desenvolvimento/jupiter-r')
runApp('Desenvolvimento/jupiter-r')
runApp('Desenvolvimento/jupiter-r')
runApp('Desenvolvimento/jupiter-r')
runApp('Desenvolvimento/jupiter-r')
runApp('Desenvolvimento/jupiter-r')
runApp('Desenvolvimento/jupiter-r')
runApp('Desenvolvimento/jupiter-r')
runApp('Desenvolvimento/jupiter-r')
runApp('Desenvolvimento/jupiter-r')
shiny::runApp('Desenvolvimento/jupiter-r')
runApp('Desenvolvimento/jupiter-r')
runApp('Desenvolvimento/jupiter-r')
runApp('Desenvolvimento/jupiter-r')
runApp('Desenvolvimento/jupiter-r')
runApp('Desenvolvimento/jupiter-r')
runApp('Desenvolvimento/jupiter-r')
runApp('Desenvolvimento/jupiter-r')
shiny::runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
library(shinydashboard)
library(leaflet)
library(dplyr)
library(shiny)
library(DT)
library(ggplot2)
library(plotly)
install.packages('plotly')
library(plotly)
function(input, output, session) {
variables <- reactiveValues(grid_read = NULL, sp_read = NULL, sp_without_outliers = NULL, results = NULL)
observeEvent(input$file1, {
if (!is.null(input$file1)) {
grid <- input$file1
variables$grid_read <- read.csv(grid$datapath, header = input$header,
sep = input$sep, quote = input$quote)
}
})
observeEvent(input$file2, {
if (!is.null(input$file2)) {
sp <- input$file2
variables$sp_read <- read.csv(sp$datapath, header = input$header,
sep = input$sep, quote = input$quote)
}
})
observeEvent(variables$sp_read, {
if (!is.null(variables$sp_read) & !is.null(variables$grid_read)) {
variables$sp_without_outliers <- remove_species_outliers(variables$grid_read, variables$sp_read)
}
})
observeEvent(variables$sp_without_outliers, {
if (!is.null(variables$grid_read) & !is.null(variables$sp_without_outliers) & (nrow(variables$sp_without_outliers)*nrow(variables$grid_read) <= 100000)) {
variables$results <- get_results(variables$grid_read, variables$sp_without_outliers)
}
})
remove_species_outliers = function(grid_read, sp_read) {
subset(sp_read, sp_read$lon >= min(grid_read$lon)
& sp_read$lon <= max(grid_read$lon)
& sp_read$lat >= min(grid_read$lat)
& sp_read$lat <= max(grid_read$lat))
}
get_species_freq = function() {
if (!is.null(input$file2)) {
sp_read <- variables$sp_read
df_freq <- count(sp_read, sp_read$sp)
data.frame(Specie = df_freq$`sp_read$sp`, Freq = df_freq$n)
}
}
get_species_outliers = function() {
if (!is.null(input$file2) & !is.null(input$file1)) {
sp_read <- variables$sp_read
grid_read <- variables$grid_read
subset(sp_read, sp_read$lon < min(grid_read$lon)
| sp_read$lon > max(grid_read$lon)
| sp_read$lat < min(grid_read$lat)
| sp_read$lat > max(grid_read$lat))
}
}
get_species_outliers_freq = function() {
sp_out <- get_species_outliers()
df_freq <- count(sp_out, sp_out$sp)
data.frame(Specie = df_freq$`sp_out$sp`, Freq = df_freq$n)
}
get_results = function(grid_read, sp_read) {
sp_read <- variables$sp_without_outliers
sp_freq <- count(sp_read, sp_read$sp)
d = 0.5
r = d/2
result_all <- c()
for (sp_index in 1:nrow(sp_read)) {
result <- c()
for (grid_index in 1:nrow(grid_read)) {
result <- c(result, ifelse(sp_read[sp_index,2:3]$lon <= grid_read[grid_index,]$lon + r &
sp_read[sp_index,2:3]$lon >= grid_read[grid_index,]$lon - r &
sp_read[sp_index,2:3]$lat <= grid_read[grid_index,]$lat + r &
sp_read[sp_index,2:3]$lat >= grid_read[grid_index,]$lat - r, 1, 0))
}
result_all <- c(result_all, result)
}
res_test <- array(result_all, dim = c(nrow(grid_read), nrow(sp_read)))
colnames(res_test) <- sp_read$sp
start_col <- 1
res_sum_per_sp <- c()
for (i in 1:nrow(sp_freq)) {
res_sum_per_sp <- c(res_sum_per_sp, apply(res_test[, start_col:(start_col + sp_freq$n[i] - 1)], 1, sum))
start_col <- sp_freq$n[i] + 1
}
res_sum_per_sp <- array(res_sum_per_sp, dim = c(nrow(grid_read), nrow(sp_freq)))
colnames(res_sum_per_sp) <- sp_freq$`sp_read$sp`
res_sum_per_sp_bin <- ifelse(res_sum_per_sp[ , ] > 0, 1, 0)
df_res_sum_per_sp_bin <- data.frame(res_sum_per_sp_bin)
df_res_sum_per_sp_bin$TOTAL <- apply(res_sum_per_sp_bin, 1, sum)
df_res_sum_per_sp_bin["TOTAL", ] <- apply(df_res_sum_per_sp_bin, 2, sum)
df_res_sum_per_sp_bin
}
# =====================================================================================
output$grid <- DT::renderDataTable({
if (!is.null(input$file1)) {
variables$grid_read
}
})
output$sp <- DT::renderDataTable({
if (!is.null(input$file2) & !is.null(input$file1)) {
remove_species_outliers(variables$grid_read, variables$sp_read)
# variables$sp_without_outliers
}
})
output$result <- DT::renderDataTable({
if (!is.null(input$file1) & !is.null(input$file2)) {
if ((nrow(variables$sp_read)*nrow(variables$grid_read) <= 100000)) {
# generate_result(variables$grid_read, variables$sp_read)
results <- variables$results
print(results[nrow(results), 2:(ncol(results))-1])
# results[ ,  >= min(input$range)]
# results[ , results[nrow(results), 2:(ncol(results))] <= max(input$range)]
}
else {
showModal(modalDialog(
title = "Hey",
easyClose = TRUE,
footer = NULL,
"There are too many rows in those data. It would take a lot of time to generate the results with the current hardware.",
br(),
"But you still can analyze your data normally."
))
data.frame(Message = c("There are too many rows in those data. It would take a lot of time to generate the results with the current hardware. But you still can analyze your data normally."))
}
}
})
output$filter_sp_occ <- renderUI({
results <- variables$results
if (!is.null(results)) {
total_occ_per_sp <- results[nrow(results), 2:ncol(results)-1]
sliderInput("range", "Occurrence range:",
min = min(total_occ_per_sp), max = max(total_occ_per_sp),
value = c(min(total_occ_per_sp), max(total_occ_per_sp)))
}
})
output$download_results <- downloadHandler(
filename = function(){"results.csv"},
content = function(fname){
if (!is.null(input$file2) & !is.null(input$file1)) {
write.csv(variables$results, fname)
}
}
)
output$download_species_freq <- downloadHandler(
filename = function(){"species_freq.csv"},
content = function(fname){
if (!is.null(input$file2) & !is.null(input$file1)) {
write.csv(get_species_freq(), fname)
}
}
)
output$download_species_outliers <- downloadHandler(
filename = function(){"species_outliers.csv"},
content = function(fname){
if (!is.null(input$file2) & !is.null(input$file1)) {
write.csv(get_species_outliers(), fname)
}
}
)
output$download_species_outliers_freq <- downloadHandler(
filename = function(){"species_outliers_freq.csv"},
content = function(fname){
if (!is.null(input$file2) & !is.null(input$file1)) {
write.csv(get_species_outliers_freq(), fname)
}
}
)
output$species <- DT::renderDataTable({
get_species_freq()
})
output$species_outliers <- DT::renderDataTable(({
get_species_outliers()
}))
output$species_outliers_freq <- DT::renderDataTable(({
if (!is.null(input$file2) & !is.null(input$file1)) {
grid_read <- variables$grid_read
sp_read <- variables$sp_read
sp_subset <- subset(sp_read, sp_read$lon < min(grid_read$lon)
| sp_read$lon > max(grid_read$lon)
| sp_read$lat < min(grid_read$lat)
| sp_read$lat > max(grid_read$lat))
df_freq <- count(sp_subset, sp_subset$sp)
data.frame(Specie = df_freq$`sp_subset$sp`, Freq = df_freq$n)
}
}))
output$scatter_plot <- renderPlotly({
if (!is.null(input$file2) & !is.null(input$file1)) {
sp_read <- variables$sp_without_outliers
grid_read <- variables$grid_read
plot_ly(data = sp_read, x = ~lat, y = ~lon, color = ~sp)
}
})
output$map_grid <- renderLeaflet({
if (!is.null(input$file1)) {
grid_read <- variables$grid_read
leaflet() %>%
addProviderTiles("Esri.OceanBasemap", group = "Esri.OceanBasemap") %>%
addProviderTiles("OpenStreetMap.Mapnik", group = "OpenStreetmap") %>%
addProviderTiles("Esri.WorldImagery", group = "Esri.WorldImagery") %>%
addLayersControl(baseGroups = c("OpenStreetmap","Esri.OceanBasemap", 'Esri.WorldImagery'),
options = layersControlOptions(collapsed = TRUE, autoZIndex = F)) %>%
setView(lng = -60.85, lat = -15.45, zoom = 3) %>%
addCircleMarkers(
lng = grid_read$lon,
lat = grid_read$lat,
popup = paste("lon:", grid_read$lon, ", lat:", grid_read$lat),
radius = 7,
color = "blue",
stroke = FALSE, fillOpacity = 0.3
)
}
})
output$map_sp <- renderLeaflet({
if (!is.null(input$file2) & !is.null(input$file1)) {
# sp_read <- variables$sp_read
grid_read <- variables$grid_read
sp_read <- variables$sp_without_outliers
leaflet() %>%
addProviderTiles("Esri.OceanBasemap", group = "Esri.OceanBasemap") %>%
addProviderTiles("OpenStreetMap.Mapnik", group = "OpenStreetmap") %>%
addProviderTiles("Esri.WorldImagery", group = "Esri.WorldImagery") %>%
addLayersControl(baseGroups = c("OpenStreetmap","Esri.OceanBasemap", 'Esri.WorldImagery'),
options = layersControlOptions(collapsed = TRUE, autoZIndex = F)) %>%
setView(lng = -60.85, lat = -15.45, zoom = 3) %>%
addCircleMarkers(
data = sp_read,
lng = sp_read$lon,
lat = sp_read$lat,
popup = paste(sp_read$sp, "lon:", sp_read$lon, ", lat:", sp_read$lat),
radius = 7,
color = "orange",
stroke = FALSE, fillOpacity = 0.3
)
}
})
output$map_sp_clustered <- renderLeaflet({
if (!is.null(input$file2) & !is.null(input$file1)) {
# sp_read <- variables$sp_read
grid_read <- variables$grid_read
sp_read <- variables$sp_without_outliers
leaflet() %>%
addProviderTiles("Esri.OceanBasemap", group = "Esri.OceanBasemap") %>%
addProviderTiles("OpenStreetMap.Mapnik", group = "OpenStreetmap") %>%
addProviderTiles("Esri.WorldImagery", group = "Esri.WorldImagery") %>%
addLayersControl(baseGroups = c("OpenStreetmap","Esri.OceanBasemap", 'Esri.WorldImagery'),
options = layersControlOptions(collapsed = TRUE, autoZIndex = F)) %>%
setView(lng = -60.85, lat = -15.45, zoom = 3) %>%
addMarkers(
data = sp_read,
label=~as.character(paste(sp_read$sp, "lon:", sp_read$lon, ", lat:", sp_read$lat)),
clusterOptions = markerClusterOptions()
) %>%
addLabelOnlyMarkers(data = sp_read,
lng = ~lon, lat = ~lat,
clusterOptions = markerClusterOptions()
)
}
})
}
library(plotly)
library(plotly)
library(plotly)
library(ggplot2)
setwd('/home/gustavo/Desenvolvimento/ExploratoryDataAnalysis/resources')
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
y
library(dplyr)
library(reshape2)
library(tidyr)
yo <- read.csv("yogurt.csv")
summary(yo)
str(yo)
yo$id <- factor(yo$id)
labels(yo)
#histogram of prices
ggplot(data = yo, aes(x = price)) +
geom_histogram()
yo <- transform(yo, all.purchases = strawberry + blueberry + pina.colada + plain + mixed.berry)
yo$id <- factor(yo$id)
yo <- transform(yo, all.purchases = strawberry + blueberry + pina.colada + plain + mixed.berry)
summary(yo)
summary(yo$all.purchases)
names(yo)
ggplot(data = yo, aes(x = time, y = price)) +
geom_dotplot()
ggplot(data = yo, aes(x = time/60, y = price)) +
geom_smooth()
ggplot(data = yo, aes(x = time/60, y = price)) +
geom_dotplot()
ggplot(data = yo, aes(x = time/3600, y = price)) +
geom_dotplot()
ggplot(data = yo, aes(x = time/3600, y = price)) +
geom_jitter()
ggplot(data = yo, aes(x = time, y = price)) +
geom_jitter()
ggplot(data = yo, aes(x = time, y = price)) +
geom_jitter(alpha = 1/4)
sample.ids <- sample(levels(yo$id), 16)
levels(yo$id)
sample.ids <- sample(levels(yo$id), 16)
set.seed(4230)
sample.ids <- sample(levels(yo$id), 16)
ggplot(data = subset(yo, id %in% sample.ids), aes(x = time, y = price)) +
facet_wrap( ~ id) +
geom_line() +
geom_point(aes(sizes = all.purchases), pch = 1)
set.seed(1356)
sample.ids <- sample(levels(yo$id), 16)
ggplot(data = subset(yo, id %in% sample.ids), aes(x = time, y = price)) +
facet_wrap( ~ id) +
geom_line() +
geom_point(aes(sizes = all.purchases), pch = 1)
