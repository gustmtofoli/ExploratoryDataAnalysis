qplot(data = pf, x = dob_day) +
scale_x_continuous(breaks = 1:31) +
facet_wrap(~dob_month, ncol = 4)
qplot(data = pf, x = friend_count, xlim = c(1,1000))
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
qplot(data = pf, x = friend_count, xlim = c(1,1000))
qplot(data = pf, x = friend_count, binwidth = 25) +
scale_y_continuous(limits = c(1, 1000), breaks = seq(0, 1000, 50))
qplot(data = pf, x = friend_count, binwidth = 25) +
scale_x_continuous(limits = c(1, 1000), breaks = seq(0, 1000, 50))
# or
qplot(data = pf, x = friend_count) +
scale_x_continuous(limits = c(1, 1000))
qplot(data = pf, x = friend_count, binwidth = 25) +
scale_x_continuous(limits = c(1, 1000), breaks = seq(0, 1000, 50))
# or
qplot(data = pf, x = friend_count) +
scale_x_continuous(limits = c(1, 1000))
qplot(data = pf, x = friend_count, binwidth = 25) +
scale_x_continuous(limits = c(1, 1000), breaks = seq(0, 1000, 50))
# gráficos para cada mês em função do dia do aniversário dos usuários
qplot(data = pf, x = dob_day) +
scale_x_continuous(breaks = 1:31) +
facet_wrap(~dob_month, ncol = 4)
#
qplot(data = pf, x = friend_count, binwidth = 25) +
scale_x_continuous(limits = c(1, 1000), breaks = seq(0, 1000, 50))
# exibe todas as variáveis
names(pf)
# gráfico
qplot(data = pf, x = friend_count, binwidth = 25) +
scale_x_continuous(limits = c(1, 1000), breaks = seq(0, 1000, 50)) +
facet_wrap(~gender, ncol = 3)
# gráfico
qplot(data = pf, x = friend_count, binwidth = 25) +
scale_x_continuous(limits = c(1, 1000), breaks = seq(0, 1000, 50))
# gráfico
qplot(data = pf, x = friend_count, binwidth = 25) +
scale_x_continuous(limits = c(1, 1000), breaks = seq(0, 1000, 50)) +
facet_wrap(~gender, ncol = 3)
# gráfico
qplot(data = pf, x = friend_count, binwidth = 25) +
scale_x_continuous(limits = c(1, 1000), breaks = seq(0, 1000, 50)) +
facet_wrap(~gender)
# gráfico com escala no eixo x de 50 em 50 e "colunas" quebrando de 25 em 25
qplot(data = pf, x = friend_count, binwidth = 25) +
scale_x_continuous(limits = c(1, 1000), breaks = seq(0, 1000, 50))
#
qplot(data = pf, x = friend_count, binwidth = 25) +
scale_x_continuous(limits = c(1, 1000), breaks = seq(0, 1000, 50)) +
facet_wrap(~gender)
# gráfico de número de amigos para cada gênero, exceto NA
qplot(data = subset(pf, !is.na(gender)), x = friend_count, binwidth = 25) +
scale_x_continuous(limits = c(1, 1000), breaks = seq(0, 1000, 50)) +
facet_wrap(~gender)
# gráfico de polígonos de frequencia para gênero
qplot(data = subset(pf, !is.na(pf$gender)), x = friend_count, binwidth = 10,
geom = 'freqpoly', color = gender) +
scale_x_continuous(breaks = seq(0, 1000, 50), limits = c(0, 1000))
# cria gráticos com escalas de log e sqrt e plota vários vários gráficos em uma só janela
library(gridExtra)
install.packages('gridExtra')
# gráfico de polígonos de frequencia para gênero
qplot(data = subset(pf, !is.na(pf$gender)), x = friend_count, binwidth = 10,
geom = 'freqpoly', color = gender) +
scale_x_continuous(breaks = seq(0, 1000, 50), limits = c(0, 1000))
library(ggplot2)
# cria gráticos com escalas de log e sqrt e plota vários vários gráficos em uma só janela
library(gridExtra)
# gráfico de polígonos de frequencia para gênero
qplot(data = subset(pf, !is.na(pf$gender)), x = friend_count, binwidth = 10,
geom = 'freqpoly', color = gender) +
scale_x_continuous(breaks = seq(0, 1000, 50), limits = c(0, 1000))
# adicionando cor de preenchimento e borda e labels no gráfico
qplot(data = pf, x = tenure/365, binwidth = .25,
xlab = 'Numbers of years using facebook',
ylab = 'Number of users in sample',
color = I('black'), fill = I('#099DD9')) +
scale_x_continuous(breaks = seq(1, 7, 1), limits = c(0, 7))
# adicionando cor de preenchimento e borda e labels no gráfico
qplot(data = pf, x = tenure/365, binwidth = .25,
xlab = 'Numbers of years using facebook',
ylab = 'Number of users in sample',
color = I('black'), fill = I('#099DD9')) +
scale_x_continuous(breaks = seq(1, 7, 1), limits = c(0, 7))
# gráfico da idade dos usuários do facebook
qplot(data = pf, x = age, binwidth = 1, color = I('#0D47A1'), fill = I('#2196F3'),
xlab = 'Age', ylab = 'Number of users in sample') +
scale_x_continuous(breaks = seq(13, 113, 5), limits = c(13, 113))
p1 <- qplot(data = pf, x = friend_count)
p2 <- qplot(data = pf, x = log10(friend_count) + 1)
p3 <- qplot(data = pf, x = sqrt(friend_count))
grid.arrange(p1, p2, p3)
#or
pl1 <- ggplot(data = pf, aes(x = friend_count)) + geom_histogram()
pl2 <- pl1 + scale_x_log10()
pl3 <- pl1 + scale_x_sqrt()
grid.arrange(pl1, pl2, pl3)
# gráfico de polígonos de frequencia para gênero
qplot(data = subset(pf, !is.na(pf$gender)), x = friend_count, binwidth = 10,
geom = 'freqpoly', color = gender) +
scale_x_continuous(breaks = seq(0, 1000, 50), limits = c(0, 1000))
# gráfico da idade dos usuários do facebook com mudança de cor na borda e fill
qplot(data = pf, x = age, binwidth = 1, color = I('#0D47A1'), fill = I('#2196F3'),
xlab = 'Age', ylab = 'Number of users in sample') +
scale_x_continuous(breaks = seq(13, 113, 5), limits = c(13, 113))
# gráfico de polígonos de frequencia para gênero
qplot(data = subset(pf, !is.na(pf$gender)), x = friend_count, binwidth = 10,
geom = 'freqpoly', color = gender) +
scale_x_continuous(breaks = seq(0, 1000, 50), limits = c(0, 1000))
View(df_teste)
View(pl1)
# gráfico de polígonos de frequencia para gênero
qplot(data = subset(pf, !is.na(pf$gender)), x = friend_count, binwidth = 10,
geom = 'freqpoly', color = gender) +
scale_x_continuous(breaks = seq(0, 1000, 50), limits = c(0, 1000))
library(ggplot2)
library(ggthemes)
# cria gráticos com escalas de log e sqrt e plota vários vários gráficos em uma só janela
library(gridExtra)
# gráfico de polígonos de frequencia para gênero
qplot(data = subset(pf, !is.na(pf$gender)), x = friend_count, binwidth = 10,
geom = 'freqpoly', color = gender) +
scale_x_continuous(breaks = seq(0, 1000, 50), limits = c(0, 1000))
names(pf)
qplot(data = subset(pf, !is.na.gender)), x = www_likes)
qplot(data = subset(pf, !is.na(of$gender)), x = www_likes)
qplot(data = subset(pf, !is.na(pf$gender)), x = www_likes)
qplot(data = subset(pf, !is.na(pf$gender)), x = www_likes, geom = 'freqpoly', color = gender)
qplot(data = subset(pf, !is.na(pf$gender)), x = www_likes, geom = 'freqpoly', color = gender) +
scale_x_continuous()
qplot(data = subset(pf, !is.na(pf$gender)), x = www_likes, geom = 'freqpoly', color = gender) +
scale_x_continuous() +
scale_x_log10()
summary(pg$www_likes)
summary(pf$www_likes)
by(pf$www_likes, pf$gender, summary)
by(pf$www_likes, pf$gender, summ)
by(pf$www_likes, pf$gender, sum)
qplot(data = subset(pf, !is.na(pf$gender)), x = www_likes, geom = 'freqpoly', color = gender)
qplot(data = subset(pf, !is.na(pf$gender)), x = www_likes, geom = 'freqpoly', color = gender) +
scale_x_continuous() +
scale_x_log10()
by(pf$www_likes, pf$gender, sum)
qplot(data = subset(pf, !is.na(pf$gender)), x = gender, y = friend_count, geom = "boxplot")
qplot(data = subset(pf, !is.na(pf$gender)), x = gender, y = friend_count, geom = "boxplot") +
scale_x_continuous(limits = c(0, 1000))
qplot(data = subset(pf, !is.na(pf$gender)), x = gender, y = friend_count, geom = "boxplot") +
scale_y_continuous(limits = c(0, 1000))
qplot(data = subset(pf, !is.na(pf$gender)), x = gender, y = friend_count, geom = "boxplot") +
coord_cartesian(ylim = c(0, 1000))
qplot(data = subset(pf, !is.na(pf$gender)), x = gender, y = friend_count, geom = "boxplot") +
coord_cartesian(ylim = c(0, 250))
by(pf$friend_count, pf$gender, summary)
names(pf)
qplot(data = subset(pf, !is.na(pf$gender)), x = gender, y = friendships_initiated, geom = "boxplot")
qplot(data = subset(pf, !is.na(pf$gender)), x = gender, y = friendships_initiated, geom = "boxplot") +
coord_cartesian(ylim = c(0, 500))
qplot(data = subset(pf, !is.na(pf$gender)), x = gender, y = friendships_initiated, geom = "boxplot") +
coord_cartesian(ylim = c(0, 200))
qplot(data = subset(pf, !is.na(pf$gender)), x = gender, y = friendships_initiated, geom = "boxplot") +
coord_cartesian(ylim = c(0, 150))
by(pf$friendships_initiated, pf$gender, summary)
View(df_test_2)
View(df_codproc_outliers_aggregate)
View(df_test_2)
# convertendo em variável de fator
pf$mobile_check_in <- factor(pf$mobile_check_in)
#or
summary(pf$mobile_likes > 0)
sum(pf$mobile_check_in == 1)/length(pf$mobile_check_in)
# cria gráticos com escalas de log e sqrt e plota vários vários gráficos em uma só janela
library(gridExtra)
library(ggplot2)
library(ggthemes)
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
#or
summary(pf$mobile_likes > 0)
sum(pf$mobile_check_in == 1)/length(pf$mobile_check_in)
library(ggplot2)
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
library(dplyr)
group_by(pf, age)
library(dplyr)
install.packages("dplyr")
ggplot(data = pf, aes(x = age, y = friendships_initiated)) +
geom_jitter(alpha = 1/20, position = position_jitter(h = 0)) +
xlim(13, 113) +
coord_trans(y = 'sqrt')
# por default, quando atribuimos duas variáveis no qplot, é utilizado gráfico de dispersão
qplot(data = pf, x = age, y = friend_count)
# usando ggplot'
# 'jitter' para excesso de plotagem no gráfico
# 'alpha' é o grau de transparência dos pontos. (1 ponto completamente preto a cada 20 ocorrencias)
ggplot(data = pf, aes(x = age, y = friend_count)) +
geom_jitter(alpha = 1/20) +
xlim(13, 90)
ggplot(data = pf, aes(x = age, y = friendships_initiated)) +
geom_jitter(alpha = 1/20, position = position_jitter(h = 0)) +
xlim(13, 113) +
coord_trans(y = 'sqrt')
# usando ggplot'
# 'jitter' para excesso de plotagem no gráfico
# 'alpha' é o grau de transparência dos pontos. (1 ponto completamente preto a cada 20 ocorrencias)
ggplot(data = pf, aes(x = age, y = friend_count)) +
geom_jitter(alpha = 1/20) +
xlim(13, 90)
# adicionando uma transformação raiz quadrada no gráfico.
# 'position' permite adicionar jitter juntamente com transformações de escala
ggplot(data = pf, aes(x = age, y = friend_count)) +
geom_jitter(alpha = 1/20, position = position_jitter(h = 0)) +
xlim(13, 90) +
coord_trans(y = 'sqrt')
# usando ggplot'
# 'jitter' para excesso de plotagem no gráfico
# 'alpha' é o grau de transparência dos pontos. (1 ponto completamente preto a cada 20 ocorrencias)
ggplot(data = pf, aes(x = age, y = friend_count)) +
geom_jitter(alpha = 1/20) +
xlim(13, 90)
# adicionando uma transformação raiz quadrada no gráfico.
# 'position' permite adicionar jitter juntamente com transformações de escala
ggplot(data = pf, aes(x = age, y = friend_count)) +
geom_jitter(alpha = 1/20, position = position_jitter(h = 0)) +
xlim(13, 90) +
coord_trans(y = 'sqrt')
summary(pf$age)
by(pf$friendships_initiated, pf$gender, summary)
# cria um gráfico boxplot di bpyneri de amigos por genero com correção das coordenadas cartesianas quando limita os dados
qplot(data = subset(pf, !is.na(pf$gender)), x = gender, y = friend_count, geom = "boxplot") +
coord_cartesian(ylim = c(0, 250))
group_by(pf, age)
library(dplyr)
group_by(pf, age)
pf.fc_by_age <- summarise(age_groups,
friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n())
age_groups <- group_by(pf, age)
pf.fc_by_age <- summarise(age_groups,
friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n())
head(pf.fc_by_age)
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
age_groups <- group_by(pf, age)
pf.fc_by_age <- summarise(age_groups,
friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n())
head(pf.fc_by_age)
pf.fc_by_age <- arrage(pf.fc_by_age, age)
pf.fc_by_age <- arrange(pf.fc_by_age, age)
head(pf.fc_by_age)
pf.fc_by_age_2 <- pf %>%
group_by(age) %>%
summarise(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %>%
arrange(age)
head(pf.fc_by_age_2)
head(pf.fc_by_age_2, 20)
ggplot(pf.fc_by_age, aes(x = age, y = friend_count_mean))
ggplot(data = pf.fc_by_age, aes(x = age, y = friend_count_mean)) +
geom_point()
ggplot(data = pf.fc_by_age, aes(x = age, y = friend_count_mean)) +
geom_line()
# adicionando uma transformação raiz quadrada no gráfico.
# 'position' permite adicionar jitter juntamente com transformações de escala
ggplot(data = pf, aes(x = age, y = friend_count)) +
geom_jitter(alpha = 1/20, position = position_jitter(h = 0), color = 'orange') +
xlim(13, 90) +
coord_trans(y = 'sqrt')
# adicionando uma transformação raiz quadrada no gráfico.
# 'position' permite adicionar jitter juntamente com transformações de escala
ggplot(data = pf, aes(x = age, y = friend_count)) +
geom_jitter(alpha = 1/20, position = position_jitter(h = 0), color = 'blue') +
xlim(13, 90) +
coord_trans(y = 'sqrt')
ggplot(data = pf, aes(x = age, y = friendships_initiated)) +
geom_jitter(alpha = 1/20, position = position_jitter(h = 0)) +
xlim(13, 113) +
coord_trans(y = 'sqrt') +
geom_line(stat = 'summary', fun.y = mean)
# adicionando uma transformação raiz quadrada no gráfico.
# 'position' permite adicionar jitter juntamente com transformações de escala
ggplot(data = pf, aes(x = age, y = friend_count)) +
geom_jitter(alpha = 1/20, position = position_jitter(h = 0), color = 'blue') +
xlim(13, 90) +
coord_trans(y = 'sqrt') +
geom_line(stat = 'summary', fun.y = mean)
# adicionando uma transformação raiz quadrada no gráfico.
# 'position' permite adicionar jitter juntamente com transformações de escala
ggplot(data = pf, aes(x = age, y = friend_count)) +
geom_jitter(alpha = 1/20, position = position_jitter(h = 0), color = 'orange') +
xlim(13, 90) +
coord_trans(y = 'sqrt') +
geom_line(stat = 'summary', fun.y = mean)
# adicionando uma transformação raiz quadrada no gráfico.
# 'position' permite adicionar jitter juntamente com transformações de escala
ggplot(data = pf, aes(x = age, y = friend_count)) +
geom_jitter(alpha = 1/20, position = position_jitter(h = 0), color = 'green') +
xlim(13, 90) +
coord_trans(y = 'sqrt') +
geom_line(stat = 'summary', fun.y = mean)
# adicionando uma transformação raiz quadrada no gráfico.
# 'position' permite adicionar jitter juntamente com transformações de escala
ggplot(data = pf, aes(x = age, y = friend_count)) +
geom_jitter(alpha = 1/20, position = position_jitter(h = 0), color = 'blue') +
xlim(13, 90) +
coord_trans(y = 'sqrt') +
geom_line(stat = 'summary', fun.y = mean, color = 'gray')
# adicionando uma transformação raiz quadrada no gráfico.
# 'position' permite adicionar jitter juntamente com transformações de escala
ggplot(data = pf, aes(x = age, y = friend_count)) +
geom_jitter(alpha = 1/20, position = position_jitter(h = 0), color = 'blue') +
xlim(13, 90) +
coord_trans(y = 'sqrt') +
geom_line(stat = 'summary', fun.y = mean)
ggplot(data = pf, aes(x = age, y = friend_count)) +
geom_jitter(alpha = 1/20, position = position_jitter(h = 0), color = 'orange') +
xlim(13, 90) +
coord_trans(y = 'sqrt') +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile, probs = .1, linetype = 2, color = 'blue')
ggplot(data = pf, aes(x = age, y = friend_count)) +
geom_jitter(alpha = 1/20, position = position_jitter(h = 0), color = 'orange') +
xlim(13, 90) +
coord_trans(y = 'sqrt') +
geom_line(stat = 'summary', fun.y = mean)
ggplot(data = pf, aes(x = age, y = friend_count)) +
geom_jitter(alpha = 1/20, position = position_jitter(h = 0), color = 'orange') +
xlim(13, 90) +
coord_trans(y = 'sqrt') +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs = .1, linetype = 2, color = 'blue'))
ggplot(data = pf, aes(x = age, y = friend_count)) +
geom_jitter(alpha = 1/20, position = position_jitter(h = 0), color = 'orange') +
coord_cartesian(xlim = c(13, 90)) +
coord_trans(y = 'sqrt') +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs = .1, linetype = 2, color = 'blue'))
ggplot(data = pf, aes(x = age, y = friend_count)) +
geom_jitter(alpha = 1/20, position = position_jitter(h = 0), color = 'orange') +
#coord_cartesian(xlim = c(13, 90)) +
xlim(13, 90) +
coord_trans(y = 'sqrt') +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs = .1, linetype = 2, color = 'blue'))
ggplot(data = pf, aes(x = age, y = friend_count)) +
geom_jitter(alpha = 1/20, position = position_jitter(h = 0), color = 'orange') +
xlim(13, 90) +
coord_trans(y = 'sqrt') +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs = .1), linetype = 2, color = 'blue')
ggplot(data = pf, aes(x = age, y = friend_count)) +
geom_jitter(alpha = 1/20, position = position_jitter(h = 0), color = 'orange') +
xlim(13, 90) +
coord_trans(y = 'sqrt') +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs = .1), linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs = .9), linetype = 2, color = 'blue')
ggplot(data = pf, aes(x = age, y = friend_count)) +
geom_jitter(alpha = 1/20, position = position_jitter(h = 0), color = 'orange') +
xlim(13, 90) +
coord_trans(y = 'sqrt') +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs = .1), linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs = .5), color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs = .9), linetype = 2, color = 'blue')
ggplot(data = pf, aes(x = age, y = friend_count)) +
geom_jitter(alpha = 1/20, position = position_jitter(h = 0), color = 'orange') +
coord_cartesian(xlim = c(13, 70), ylim = c(0, 1000))
ggplot(data = pf, aes(x = age, y = friend_count)) +
geom_jitter(alpha = 1/20, position = position_jitter(h = 0), color = 'orange') +
coord_cartesian(xlim = c(13, 70), ylim = c(0, 1000)) +
coord_trans(y = 'sqrt') +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs = .1), linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs = .5), color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs = .9), linetype = 2, color = 'blue')
ggplot(data = pf, aes(x = age, y = friend_count)) +
geom_jitter(alpha = 1/20, position = position_jitter(h = 0), color = 'orange') +
coord_cartesian(xlim = c(13, 70), ylim = c(0, 1000)) +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs = .1), linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs = .5), color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs = .9), linetype = 2, color = 'blue')
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
ggplot(data = pf, aes(x = www_likes_received, y = likes_received)) +
geom_point(color = 'black') +
xlim(0, quantile(pf$www_likes_received, .95)) +
ylim(0, quantile(pf$likes_received, .95)) +
geom_smooth(method = 'lm', color = 'red')
library(dplyr)
library(ggplot2)
ggplot(data = pf, aes(x = www_likes_received, y = likes_received)) +
geom_point(color = 'black') +
xlim(0, quantile(pf$www_likes_received, .95)) +
ylim(0, quantile(pf$likes_received, .95)) +
geom_smooth(method = 'lm', color = 'red')
# adicionando linha entre os pontos do gráfico de dispersão
ggplot(data = pf.fc_by_age, aes(x = age, y = friend_count_mean)) +
geom_line()
# agrupa por alguma variável, no caso, 'age'
age_groups <- group_by(pf, age)
# mostra a idade, mediana do número de amigos, média do número de amigos e número de usuários que pertence a esse grupo
pf.fc_by_age <- summarise(age_groups,
friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n())
# ordena por idade
pf.fc_by_age <- arrange(pf.fc_by_age, age)
ggplot(data = pf.fc_by_age, aes(x = age, y = friend_count_mean)) +
geom_line()
head(pf.fc_by_age, 10)
pf.fc_by_age[17:19, ]
names(pf)
summary(pf$dob_month)
pf$age_with_months <- pf$age + (12 - pf$dob_month)/12
pf$age_with_months
month_groups <- group_by(pf, age_with_months)
pf.fc_by_month <- summarise(month_groups,
friend_count_mean_month = mean(friend_count),
friend_count_median_month = median(friend_count),
n = n())
head(pf.fc_by_month, 10)
ggplot(data = pf.fc_by_month, aes(x = friend_count_mean_month, y = age_with_months)) +
geom_point()
ggplot(data = pf.fc_by_month, aes(x = age_with_months, y = friend_count_mean_month)) +
geom_point()
arrange(age_with_months)
arrange(pf$age_with_months)
pf$age_with_months <- pf$age + (12 - pf$dob_month)/12
month_groups <- group_by(pf, age_with_months)
pf.fc_by_month <- summarise(month_groups,
friend_count_mean_month = mean(friend_count),
friend_count_median_month = median(friend_count),
n = n())
arrange(pf$age_with_months)
arrange(pf, age_with_months)
head(pf.fc_by_month, 10)
arrange(pf.fc_by_month, age_with_months)
head(pf.fc_by_month, 10)
arrange(pf.fc_by_month, age_with_months)
head(pf.fc_by_month, 10)
ggplot(data = pf.fc_by_month, aes(x = age_with_months, y = friend_count_mean_month)) +
geom_point()
ggplot(data = subset(pf.fc_by_month, age_with_months < 71), aes(x = age_with_months, y = friend_count_mean_month)) +
geom_line()
head(pf.fc_by_age, 10)
ggplot(data = subset(pf.fc_by_age, age < 71), aes(x = age, y = friend_count_mean)) +
geom_line()
library(gridExtra)
grid.arrange(plot_by_age, plot_by_month)
plot_by_age <- ggplot(data = subset(pf.fc_by_age, age < 71), aes(x = age, y = friend_count_mean)) +
geom_line()
pf.fc_by_month <- summarise(month_groups,
friend_count_mean_month = mean(friend_count),
friend_count_median_month = median(friend_count),
n = n())
plot_by_month <- ggplot(data = subset(pf.fc_by_month, age_with_months < 71), aes(x = age_with_months, y = friend_count_mean_month)) +
geom_line()
grid.arrange(plot_by_age, plot_by_month)
grid.arrange(plot_by_age, plot_by_month, col = 1)
grid.arrange(plot_by_age, plot_by_month)
grid.arrange(plot_by_age, plot_by_month, ncol = 1)
grid.arrange(plot_by_age, plot_by_month, ncol = 2)
ggplot(data = pf, aes(x = www_likes_received, y = likes_received)) +
geom_point(color = 'black') +
xlim(0, quantile(pf$www_likes_received, .95)) +
ylim(0, quantile(pf$likes_received, .95)) +
geom_smooth(method = 'lm', color = 'red')
# adicionando linhas da média, 10%, 50%, 90% no gráfico de dispersão e dando zoom
ggplot(data = pf, aes(x = age, y = friend_count)) +
geom_jitter(alpha = 1/20, position = position_jitter(h = 0), color = 'orange') +
coord_cartesian(xlim = c(13, 70), ylim = c(0, 1000)) +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs = .1), linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs = .5), color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs = .9), linetype = 2, color = 'blue')
grid.arrange(plot_by_age, plot_by_month, ncol = 1)
plot_by_month_five <-  ggplot(data = subset(pf.fc_by_age, age < 71), aes(x = round(age / 5) * 5, y = friend_count)) +
geom_line(stat = "summary", fun.y = mean)
plot_by_month_five
plot_by_month_five <-  ggplot(data = subset(pf, age < 71), aes(x = round(age / 5) * 5, y = friend_count)) +
geom_line(stat = "summary", fun.y = mean)
plot_by_month_five
grid.arrange(plot_by_age, plot_by_month, plot_by_month_five, ncol = 1)
plot_by_age <- ggplot(data = subset(pf.fc_by_age, age < 71), aes(x = age, y = friend_count_mean)) +
geom_line() +
geom_smooth()
plot_by_month <- ggplot(data = subset(pf.fc_by_month, age_with_months < 71), aes(x = age_with_months, y = friend_count_mean_month)) +
geom_line() +
geom_smooth()
plot_by_month_five <-  ggplot(data = subset(pf, age < 71), aes(x = round(age / 5) * 5, y = friend_count)) +
geom_line(stat = "summary", fun.y = mean)
grid.arrange(plot_by_age, plot_by_month, plot_by_month_five, ncol = 1)
shiny::runApp('data-science-r/ExploratoryDataAnalysis/shiny/appR')
runApp('data-science-r/ExploratoryDataAnalysis/shiny/appR')
runApp('data-science-r/ExploratoryDataAnalysis/shiny/appR')
runApp('data-science-r/ExploratoryDataAnalysis/shiny/appR')
runApp('data-science-r/ExploratoryDataAnalysis/shiny/appR')
runApp('data-science-r/ExploratoryDataAnalysis/shiny/appR')
runApp('data-science-r/ExploratoryDataAnalysis/shiny/appR')
runApp('data-science-r/ExploratoryDataAnalysis/shiny/appR')
runApp('data-science-r/ExploratoryDataAnalysis/shiny/appR')
runApp('data-science-r/ExploratoryDataAnalysis/shiny/appR')
runApp('data-science-r/ExploratoryDataAnalysis/shiny/appR')
runApp('data-science-r/ExploratoryDataAnalysis/shiny/appR')
runApp('data-science-r/ExploratoryDataAnalysis/shiny/appR')
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
runApp('data-science-r/ExploratoryDataAnalysis/shiny/appR')
